{{- define "admin.go" -}}
{{ template "warning.go" . }}

package admin

import (
	"fmt"
	"{{ .ModuleName }}/internal/config"
	"{{ .ModuleName }}/internal/server/admin/template/data"
	"{{ .ModuleName }}/internal/server/admin/template/page"
	"net/http"

	"github.com/a-h/templ"
	"github.com/golang-jwt/jwt/v5"
	echojwt "github.com/labstack/echo-jwt/v4"
	"github.com/labstack/echo/v4"
)

func customHTTPErrorHandler(err error, c echo.Context) {
	if c.Response().Committed {
		return
	}

	code := http.StatusInternalServerError
	if he, ok := err.(*echo.HTTPError); ok {
		code = he.Code
	}

	if code == http.StatusNotFound {
		Render(c, http.StatusNotFound, page.NotFound("TITLE", &data.User{}))
		return
	}

	c.Logger().Error(err)
	errorPage := fmt.Sprintf("%d.html", code)
	if err := c.File(errorPage); err != nil {
		c.Logger().Error(err)
	}

	Render(c, http.StatusNotFound, page.ServerError("TITLE", &data.User{}))
}

func CreateRoutes(e *echo.Echo) {
	// load config
	config.MustLoadConfig()

	// set error handler
	e.HTTPErrorHandler = customHTTPErrorHandler

	// static assets
	e.Static("/", "internal/server/admin/asset")

	// public routes
	e.GET("/login", getLoginHandler)
	e.POST("/login", postLoginHandler)

	// create the restricted routes (r)
	r := e.Group("/admin")

	config := echojwt.Config{
		NewClaimsFunc: func(c echo.Context) jwt.Claims {
			return new(jwtCustomClaims)
		},
		SigningKey:  []byte(config.AdminConfig.JWTSecret),
		TokenLookup: "cookie:token",
	}

	r.Use(echojwt.WithConfig(config))
	r.Use(JWTExtractor)

	r.GET("", dashboardHandler)
	r.GET("/logout", logoutHandler)
}
{{ end }}
