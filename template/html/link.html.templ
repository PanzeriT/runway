package html

type linkOptionalArgs struct {
	class    string
	text     string
	asButton bool
	target   string

	hxGet     string
	hxDelete  string
	hxConfirm string
	hxTarget  string
	hxSwap    string
}

type linkOptionFunc func(*linkOptionalArgs)

func AsButton() linkOptionFunc {
	return func(args *linkOptionalArgs) {
		args.asButton = true
	}
}

func WithClass(class string) linkOptionFunc {
	return func(args *linkOptionalArgs) {
		args.class = class
	}
}

func WithText(text string) linkOptionFunc {
	return func(args *linkOptionalArgs) {
		args.text = text
	}
}

func WithTarget(target string) linkOptionFunc {
	return func(args *linkOptionalArgs) {
		args.target = target
	}
}
func WithHxGet(hxGet string) linkOptionFunc {
	return func(args *linkOptionalArgs) {
		args.hxGet = hxGet
	}
}

func WithHxDelete(hxDelete string) linkOptionFunc {
	return func(args *linkOptionalArgs) {
		args.hxDelete = hxDelete
	}
}

func WithHxConfirm(hxConfirm string) linkOptionFunc {
	return func(args *linkOptionalArgs) {
		args.hxConfirm = hxConfirm
	}
}

func WithHxTarget(hxTarget string) linkOptionFunc {
	return func(args *linkOptionalArgs) {
		args.hxTarget = hxTarget
	}
}

func WithHxSwap(hxSwap string) linkOptionFunc {
	return func(args *linkOptionalArgs) {
		args.hxSwap = hxSwap
	}
}

func LinkButton(href string, optionalArgs ...linkOptionFunc) templ.Component {
	optionalArgs = append(optionalArgs, AsButton())
	return Link(href, optionalArgs...)
}

func Link(href string, optionalArgs ...linkOptionFunc) templ.Component {
	args := &linkOptionalArgs{}

	for _, arg := range optionalArgs {
		arg(args)
	}

	return link(href, args)
}

func composeClass(base, extension string) string {
	if base == "" {
		return extension
	}
	if extension == "" {
		return base
	}
	return base + " " + extension
}

templ link(href string, args *linkOptionalArgs) {
	<a
		href={ href }
		if args.asButton {
			class={ composeClass("inline-block px-4 py-2 m-2 bg-blue-600 text-white font-semibold rounded-lg shadow-lg hover:bg-gradient-to-r hover:from-blue-600 hover:to-blue-800 transition-colors", args.class) }
		} else {
			class={ composeClass("px-4, py-2 m-2 text-blue-600 hover:underline text-lg font-medium", args.class) }
		}
		if args.target != "" {
			target={ args.target }
		}
		if args.hxGet != "" {
			hx-get={ args.hxGet }
		}
		if args.hxDelete != "" {
			hx-delete={ args.hxDelete }
		}
		if args.hxConfirm != "" {
			hx-confirm={ args.hxConfirm }
		}
		if args.hxTarget != "" {
			hx-target={ args.hxTarget }
		}
		if args.hxSwap != "" {
			hx-swap={ args.hxSwap }
		}
	>
		if args.text != "" {
			{ args.text }
		} else {
			{ children... }
		}
	</a>
}
